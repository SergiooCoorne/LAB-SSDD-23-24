# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.8
#
# <auto-generated>
#
# Generated from file `icedrive.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module IceDrive
_M_IceDrive = Ice.openModule('IceDrive')
__name__ = 'IceDrive'

if '_t_Bytes' not in _M_IceDrive.__dict__:
    _M_IceDrive._t_Bytes = IcePy.defineSequence('::IceDrive::Bytes', (), IcePy._t_byte)

if '_t_Strings' not in _M_IceDrive.__dict__:
    _M_IceDrive._t_Strings = IcePy.defineSequence('::IceDrive::Strings', (), IcePy._t_string)

if 'Unauthorized' not in _M_IceDrive.__dict__:
    _M_IceDrive.Unauthorized = Ice.createTempClass()
    class Unauthorized(Ice.UserException):
        def __init__(self, username=''):
            self.username = username

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::Unauthorized'

    _M_IceDrive._t_Unauthorized = IcePy.defineException('::IceDrive::Unauthorized', Unauthorized, (), False, None, (('username', (), IcePy._t_string, False, 0),))
    Unauthorized._ice_type = _M_IceDrive._t_Unauthorized

    _M_IceDrive.Unauthorized = Unauthorized
    del Unauthorized

if 'UserAlreadyExists' not in _M_IceDrive.__dict__:
    _M_IceDrive.UserAlreadyExists = Ice.createTempClass()
    class UserAlreadyExists(Ice.UserException):
        def __init__(self, username=''):
            self.username = username

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::UserAlreadyExists'

    _M_IceDrive._t_UserAlreadyExists = IcePy.defineException('::IceDrive::UserAlreadyExists', UserAlreadyExists, (), False, None, (('username', (), IcePy._t_string, False, 0),))
    UserAlreadyExists._ice_type = _M_IceDrive._t_UserAlreadyExists

    _M_IceDrive.UserAlreadyExists = UserAlreadyExists
    del UserAlreadyExists

if 'UserNotExist' not in _M_IceDrive.__dict__:
    _M_IceDrive.UserNotExist = Ice.createTempClass()
    class UserNotExist(Ice.UserException):
        def __init__(self, username=''):
            self.username = username

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::UserNotExist'

    _M_IceDrive._t_UserNotExist = IcePy.defineException('::IceDrive::UserNotExist', UserNotExist, (), False, None, (('username', (), IcePy._t_string, False, 0),))
    UserNotExist._ice_type = _M_IceDrive._t_UserNotExist

    _M_IceDrive.UserNotExist = UserNotExist
    del UserNotExist

if 'ChildAlreadyExists' not in _M_IceDrive.__dict__:
    _M_IceDrive.ChildAlreadyExists = Ice.createTempClass()
    class ChildAlreadyExists(Ice.UserException):
        def __init__(self, childName='', path=''):
            self.childName = childName
            self.path = path

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::ChildAlreadyExists'

    _M_IceDrive._t_ChildAlreadyExists = IcePy.defineException('::IceDrive::ChildAlreadyExists', ChildAlreadyExists, (), False, None, (
        ('childName', (), IcePy._t_string, False, 0),
        ('path', (), IcePy._t_string, False, 0)
    ))
    ChildAlreadyExists._ice_type = _M_IceDrive._t_ChildAlreadyExists

    _M_IceDrive.ChildAlreadyExists = ChildAlreadyExists
    del ChildAlreadyExists

if 'ChildNotExists' not in _M_IceDrive.__dict__:
    _M_IceDrive.ChildNotExists = Ice.createTempClass()
    class ChildNotExists(Ice.UserException):
        def __init__(self, childName='', path=''):
            self.childName = childName
            self.path = path

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::ChildNotExists'

    _M_IceDrive._t_ChildNotExists = IcePy.defineException('::IceDrive::ChildNotExists', ChildNotExists, (), False, None, (
        ('childName', (), IcePy._t_string, False, 0),
        ('path', (), IcePy._t_string, False, 0)
    ))
    ChildNotExists._ice_type = _M_IceDrive._t_ChildNotExists

    _M_IceDrive.ChildNotExists = ChildNotExists
    del ChildNotExists

if 'RootHasNoParent' not in _M_IceDrive.__dict__:
    _M_IceDrive.RootHasNoParent = Ice.createTempClass()
    class RootHasNoParent(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::RootHasNoParent'

    _M_IceDrive._t_RootHasNoParent = IcePy.defineException('::IceDrive::RootHasNoParent', RootHasNoParent, (), False, None, ())
    RootHasNoParent._ice_type = _M_IceDrive._t_RootHasNoParent

    _M_IceDrive.RootHasNoParent = RootHasNoParent
    del RootHasNoParent

if 'FileNotFound' not in _M_IceDrive.__dict__:
    _M_IceDrive.FileNotFound = Ice.createTempClass()
    class FileNotFound(Ice.UserException):
        def __init__(self, filename=''):
            self.filename = filename

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::FileNotFound'

    _M_IceDrive._t_FileNotFound = IcePy.defineException('::IceDrive::FileNotFound', FileNotFound, (), False, None, (('filename', (), IcePy._t_string, False, 0),))
    FileNotFound._ice_type = _M_IceDrive._t_FileNotFound

    _M_IceDrive.FileNotFound = FileNotFound
    del FileNotFound

if 'FileAlreadyExists' not in _M_IceDrive.__dict__:
    _M_IceDrive.FileAlreadyExists = Ice.createTempClass()
    class FileAlreadyExists(Ice.UserException):
        def __init__(self, filename=''):
            self.filename = filename

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::FileAlreadyExists'

    _M_IceDrive._t_FileAlreadyExists = IcePy.defineException('::IceDrive::FileAlreadyExists', FileAlreadyExists, (), False, None, (('filename', (), IcePy._t_string, False, 0),))
    FileAlreadyExists._ice_type = _M_IceDrive._t_FileAlreadyExists

    _M_IceDrive.FileAlreadyExists = FileAlreadyExists
    del FileAlreadyExists

if 'UnknownBlob' not in _M_IceDrive.__dict__:
    _M_IceDrive.UnknownBlob = Ice.createTempClass()
    class UnknownBlob(Ice.UserException):
        def __init__(self, blobId=''):
            self.blobId = blobId

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::UnknownBlob'

    _M_IceDrive._t_UnknownBlob = IcePy.defineException('::IceDrive::UnknownBlob', UnknownBlob, (), False, None, (('blobId', (), IcePy._t_string, False, 0),))
    UnknownBlob._ice_type = _M_IceDrive._t_UnknownBlob

    _M_IceDrive.UnknownBlob = UnknownBlob
    del UnknownBlob

if 'FailedToReadData' not in _M_IceDrive.__dict__:
    _M_IceDrive.FailedToReadData = Ice.createTempClass()
    class FailedToReadData(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IceDrive::FailedToReadData'

    _M_IceDrive._t_FailedToReadData = IcePy.defineException('::IceDrive::FailedToReadData', FailedToReadData, (), False, None, ())
    FailedToReadData._ice_type = _M_IceDrive._t_FailedToReadData

    _M_IceDrive.FailedToReadData = FailedToReadData
    del FailedToReadData

_M_IceDrive._t_User = IcePy.defineValue('::IceDrive::User', Ice.Value, -1, (), False, True, None, ())

if 'UserPrx' not in _M_IceDrive.__dict__:
    _M_IceDrive.UserPrx = Ice.createTempClass()
    class UserPrx(Ice.ObjectPrx):

        def getUsername(self, context=None):
            return _M_IceDrive.User._op_getUsername.invoke(self, ((), context))

        def getUsernameAsync(self, context=None):
            return _M_IceDrive.User._op_getUsername.invokeAsync(self, ((), context))

        def begin_getUsername(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.User._op_getUsername.begin(self, ((), _response, _ex, _sent, context))

        def end_getUsername(self, _r):
            return _M_IceDrive.User._op_getUsername.end(self, _r)

        def isAlive(self, context=None):
            return _M_IceDrive.User._op_isAlive.invoke(self, ((), context))

        def isAliveAsync(self, context=None):
            return _M_IceDrive.User._op_isAlive.invokeAsync(self, ((), context))

        def begin_isAlive(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.User._op_isAlive.begin(self, ((), _response, _ex, _sent, context))

        def end_isAlive(self, _r):
            return _M_IceDrive.User._op_isAlive.end(self, _r)

        def refresh(self, context=None):
            return _M_IceDrive.User._op_refresh.invoke(self, ((), context))

        def refreshAsync(self, context=None):
            return _M_IceDrive.User._op_refresh.invokeAsync(self, ((), context))

        def begin_refresh(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.User._op_refresh.begin(self, ((), _response, _ex, _sent, context))

        def end_refresh(self, _r):
            return _M_IceDrive.User._op_refresh.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDrive.UserPrx.ice_checkedCast(proxy, '::IceDrive::User', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDrive.UserPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDrive::User'
    _M_IceDrive._t_UserPrx = IcePy.defineProxy('::IceDrive::User', UserPrx)

    _M_IceDrive.UserPrx = UserPrx
    del UserPrx

    _M_IceDrive.User = Ice.createTempClass()
    class User(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDrive::User')

        def ice_id(self, current=None):
            return '::IceDrive::User'

        @staticmethod
        def ice_staticId():
            return '::IceDrive::User'

        def getUsername(self, current=None):
            raise NotImplementedError("servant method 'getUsername' not implemented")

        def isAlive(self, current=None):
            raise NotImplementedError("servant method 'isAlive' not implemented")

        def refresh(self, current=None):
            raise NotImplementedError("servant method 'refresh' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDrive._t_UserDisp)

        __repr__ = __str__

    _M_IceDrive._t_UserDisp = IcePy.defineClass('::IceDrive::User', User, (), None, ())
    User._ice_type = _M_IceDrive._t_UserDisp

    User._op_getUsername = IcePy.Operation('getUsername', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    User._op_isAlive = IcePy.Operation('isAlive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    User._op_refresh = IcePy.Operation('refresh', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_IceDrive._t_Unauthorized, _M_IceDrive._t_UserNotExist))

    _M_IceDrive.User = User
    del User

_M_IceDrive._t_Authentication = IcePy.defineValue('::IceDrive::Authentication', Ice.Value, -1, (), False, True, None, ())

if 'AuthenticationPrx' not in _M_IceDrive.__dict__:
    _M_IceDrive.AuthenticationPrx = Ice.createTempClass()
    class AuthenticationPrx(Ice.ObjectPrx):

        def login(self, username, password, context=None):
            return _M_IceDrive.Authentication._op_login.invoke(self, ((username, password), context))

        def loginAsync(self, username, password, context=None):
            return _M_IceDrive.Authentication._op_login.invokeAsync(self, ((username, password), context))

        def begin_login(self, username, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Authentication._op_login.begin(self, ((username, password), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_IceDrive.Authentication._op_login.end(self, _r)

        def newUser(self, username, password, context=None):
            return _M_IceDrive.Authentication._op_newUser.invoke(self, ((username, password), context))

        def newUserAsync(self, username, password, context=None):
            return _M_IceDrive.Authentication._op_newUser.invokeAsync(self, ((username, password), context))

        def begin_newUser(self, username, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Authentication._op_newUser.begin(self, ((username, password), _response, _ex, _sent, context))

        def end_newUser(self, _r):
            return _M_IceDrive.Authentication._op_newUser.end(self, _r)

        def removeUser(self, username, password, context=None):
            return _M_IceDrive.Authentication._op_removeUser.invoke(self, ((username, password), context))

        def removeUserAsync(self, username, password, context=None):
            return _M_IceDrive.Authentication._op_removeUser.invokeAsync(self, ((username, password), context))

        def begin_removeUser(self, username, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Authentication._op_removeUser.begin(self, ((username, password), _response, _ex, _sent, context))

        def end_removeUser(self, _r):
            return _M_IceDrive.Authentication._op_removeUser.end(self, _r)

        def verifyUser(self, user, context=None):
            return _M_IceDrive.Authentication._op_verifyUser.invoke(self, ((user, ), context))

        def verifyUserAsync(self, user, context=None):
            return _M_IceDrive.Authentication._op_verifyUser.invokeAsync(self, ((user, ), context))

        def begin_verifyUser(self, user, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Authentication._op_verifyUser.begin(self, ((user, ), _response, _ex, _sent, context))

        def end_verifyUser(self, _r):
            return _M_IceDrive.Authentication._op_verifyUser.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDrive.AuthenticationPrx.ice_checkedCast(proxy, '::IceDrive::Authentication', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDrive.AuthenticationPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDrive::Authentication'
    _M_IceDrive._t_AuthenticationPrx = IcePy.defineProxy('::IceDrive::Authentication', AuthenticationPrx)

    _M_IceDrive.AuthenticationPrx = AuthenticationPrx
    del AuthenticationPrx

    _M_IceDrive.Authentication = Ice.createTempClass()
    class Authentication(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDrive::Authentication')

        def ice_id(self, current=None):
            return '::IceDrive::Authentication'

        @staticmethod
        def ice_staticId():
            return '::IceDrive::Authentication'

        def login(self, username, password, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def newUser(self, username, password, current=None):
            raise NotImplementedError("servant method 'newUser' not implemented")

        def removeUser(self, username, password, current=None):
            raise NotImplementedError("servant method 'removeUser' not implemented")

        def verifyUser(self, user, current=None):
            raise NotImplementedError("servant method 'verifyUser' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDrive._t_AuthenticationDisp)

        __repr__ = __str__

    _M_IceDrive._t_AuthenticationDisp = IcePy.defineClass('::IceDrive::Authentication', Authentication, (), None, ())
    Authentication._ice_type = _M_IceDrive._t_AuthenticationDisp

    Authentication._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_IceDrive._t_UserPrx, False, 0), (_M_IceDrive._t_Unauthorized,))
    Authentication._op_newUser = IcePy.Operation('newUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_IceDrive._t_UserPrx, False, 0), (_M_IceDrive._t_UserAlreadyExists,))
    Authentication._op_removeUser = IcePy.Operation('removeUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceDrive._t_Unauthorized,))
    Authentication._op_verifyUser = IcePy.Operation('verifyUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_IceDrive._t_UserPrx, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_IceDrive.Authentication = Authentication
    del Authentication

_M_IceDrive._t_DataTransfer = IcePy.defineValue('::IceDrive::DataTransfer', Ice.Value, -1, (), False, True, None, ())

if 'DataTransferPrx' not in _M_IceDrive.__dict__:
    _M_IceDrive.DataTransferPrx = Ice.createTempClass()
    class DataTransferPrx(Ice.ObjectPrx):

        def read(self, size, context=None):
            return _M_IceDrive.DataTransfer._op_read.invoke(self, ((size, ), context))

        def readAsync(self, size, context=None):
            return _M_IceDrive.DataTransfer._op_read.invokeAsync(self, ((size, ), context))

        def begin_read(self, size, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.DataTransfer._op_read.begin(self, ((size, ), _response, _ex, _sent, context))

        def end_read(self, _r):
            return _M_IceDrive.DataTransfer._op_read.end(self, _r)

        def close(self, context=None):
            return _M_IceDrive.DataTransfer._op_close.invoke(self, ((), context))

        def closeAsync(self, context=None):
            return _M_IceDrive.DataTransfer._op_close.invokeAsync(self, ((), context))

        def begin_close(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.DataTransfer._op_close.begin(self, ((), _response, _ex, _sent, context))

        def end_close(self, _r):
            return _M_IceDrive.DataTransfer._op_close.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDrive.DataTransferPrx.ice_checkedCast(proxy, '::IceDrive::DataTransfer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDrive.DataTransferPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDrive::DataTransfer'
    _M_IceDrive._t_DataTransferPrx = IcePy.defineProxy('::IceDrive::DataTransfer', DataTransferPrx)

    _M_IceDrive.DataTransferPrx = DataTransferPrx
    del DataTransferPrx

    _M_IceDrive.DataTransfer = Ice.createTempClass()
    class DataTransfer(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDrive::DataTransfer')

        def ice_id(self, current=None):
            return '::IceDrive::DataTransfer'

        @staticmethod
        def ice_staticId():
            return '::IceDrive::DataTransfer'

        def read(self, size, current=None):
            raise NotImplementedError("servant method 'read' not implemented")

        def close(self, current=None):
            raise NotImplementedError("servant method 'close' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDrive._t_DataTransferDisp)

        __repr__ = __str__

    _M_IceDrive._t_DataTransferDisp = IcePy.defineClass('::IceDrive::DataTransfer', DataTransfer, (), None, ())
    DataTransfer._ice_type = _M_IceDrive._t_DataTransferDisp

    DataTransfer._op_read = IcePy.Operation('read', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_IceDrive._t_Bytes, False, 0), (_M_IceDrive._t_FailedToReadData,))
    DataTransfer._op_close = IcePy.Operation('close', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_IceDrive.DataTransfer = DataTransfer
    del DataTransfer

_M_IceDrive._t_BlobService = IcePy.defineValue('::IceDrive::BlobService', Ice.Value, -1, (), False, True, None, ())

if 'BlobServicePrx' not in _M_IceDrive.__dict__:
    _M_IceDrive.BlobServicePrx = Ice.createTempClass()
    class BlobServicePrx(Ice.ObjectPrx):

        def link(self, blobId, context=None):
            return _M_IceDrive.BlobService._op_link.invoke(self, ((blobId, ), context))

        def linkAsync(self, blobId, context=None):
            return _M_IceDrive.BlobService._op_link.invokeAsync(self, ((blobId, ), context))

        def begin_link(self, blobId, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.BlobService._op_link.begin(self, ((blobId, ), _response, _ex, _sent, context))

        def end_link(self, _r):
            return _M_IceDrive.BlobService._op_link.end(self, _r)

        def unlink(self, blobId, context=None):
            return _M_IceDrive.BlobService._op_unlink.invoke(self, ((blobId, ), context))

        def unlinkAsync(self, blobId, context=None):
            return _M_IceDrive.BlobService._op_unlink.invokeAsync(self, ((blobId, ), context))

        def begin_unlink(self, blobId, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.BlobService._op_unlink.begin(self, ((blobId, ), _response, _ex, _sent, context))

        def end_unlink(self, _r):
            return _M_IceDrive.BlobService._op_unlink.end(self, _r)

        def upload(self, blob, context=None):
            return _M_IceDrive.BlobService._op_upload.invoke(self, ((blob, ), context))

        def uploadAsync(self, blob, context=None):
            return _M_IceDrive.BlobService._op_upload.invokeAsync(self, ((blob, ), context))

        def begin_upload(self, blob, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.BlobService._op_upload.begin(self, ((blob, ), _response, _ex, _sent, context))

        def end_upload(self, _r):
            return _M_IceDrive.BlobService._op_upload.end(self, _r)

        def download(self, blobId, context=None):
            return _M_IceDrive.BlobService._op_download.invoke(self, ((blobId, ), context))

        def downloadAsync(self, blobId, context=None):
            return _M_IceDrive.BlobService._op_download.invokeAsync(self, ((blobId, ), context))

        def begin_download(self, blobId, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.BlobService._op_download.begin(self, ((blobId, ), _response, _ex, _sent, context))

        def end_download(self, _r):
            return _M_IceDrive.BlobService._op_download.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDrive.BlobServicePrx.ice_checkedCast(proxy, '::IceDrive::BlobService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDrive.BlobServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDrive::BlobService'
    _M_IceDrive._t_BlobServicePrx = IcePy.defineProxy('::IceDrive::BlobService', BlobServicePrx)

    _M_IceDrive.BlobServicePrx = BlobServicePrx
    del BlobServicePrx

    _M_IceDrive.BlobService = Ice.createTempClass()
    class BlobService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDrive::BlobService')

        def ice_id(self, current=None):
            return '::IceDrive::BlobService'

        @staticmethod
        def ice_staticId():
            return '::IceDrive::BlobService'

        def link(self, blobId, current=None):
            raise NotImplementedError("servant method 'link' not implemented")

        def unlink(self, blobId, current=None):
            raise NotImplementedError("servant method 'unlink' not implemented")

        def upload(self, blob, current=None):
            raise NotImplementedError("servant method 'upload' not implemented")

        def download(self, blobId, current=None):
            raise NotImplementedError("servant method 'download' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDrive._t_BlobServiceDisp)

        __repr__ = __str__

    _M_IceDrive._t_BlobServiceDisp = IcePy.defineClass('::IceDrive::BlobService', BlobService, (), None, ())
    BlobService._ice_type = _M_IceDrive._t_BlobServiceDisp

    BlobService._op_link = IcePy.Operation('link', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceDrive._t_UnknownBlob,))
    BlobService._op_unlink = IcePy.Operation('unlink', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceDrive._t_UnknownBlob,))
    BlobService._op_upload = IcePy.Operation('upload', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_IceDrive._t_DataTransferPrx, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_IceDrive._t_FailedToReadData,))
    BlobService._op_download = IcePy.Operation('download', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceDrive._t_DataTransferPrx, False, 0), (_M_IceDrive._t_UnknownBlob,))

    _M_IceDrive.BlobService = BlobService
    del BlobService

_M_IceDrive._t_Directory = IcePy.defineValue('::IceDrive::Directory', Ice.Value, -1, (), False, True, None, ())

if 'DirectoryPrx' not in _M_IceDrive.__dict__:
    _M_IceDrive.DirectoryPrx = Ice.createTempClass()
    class DirectoryPrx(Ice.ObjectPrx):

        def getParent(self, context=None):
            return _M_IceDrive.Directory._op_getParent.invoke(self, ((), context))

        def getParentAsync(self, context=None):
            return _M_IceDrive.Directory._op_getParent.invokeAsync(self, ((), context))

        def begin_getParent(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_getParent.begin(self, ((), _response, _ex, _sent, context))

        def end_getParent(self, _r):
            return _M_IceDrive.Directory._op_getParent.end(self, _r)

        def getChilds(self, context=None):
            return _M_IceDrive.Directory._op_getChilds.invoke(self, ((), context))

        def getChildsAsync(self, context=None):
            return _M_IceDrive.Directory._op_getChilds.invokeAsync(self, ((), context))

        def begin_getChilds(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_getChilds.begin(self, ((), _response, _ex, _sent, context))

        def end_getChilds(self, _r):
            return _M_IceDrive.Directory._op_getChilds.end(self, _r)

        def getChild(self, childName, context=None):
            return _M_IceDrive.Directory._op_getChild.invoke(self, ((childName, ), context))

        def getChildAsync(self, childName, context=None):
            return _M_IceDrive.Directory._op_getChild.invokeAsync(self, ((childName, ), context))

        def begin_getChild(self, childName, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_getChild.begin(self, ((childName, ), _response, _ex, _sent, context))

        def end_getChild(self, _r):
            return _M_IceDrive.Directory._op_getChild.end(self, _r)

        def createChild(self, childName, context=None):
            return _M_IceDrive.Directory._op_createChild.invoke(self, ((childName, ), context))

        def createChildAsync(self, childName, context=None):
            return _M_IceDrive.Directory._op_createChild.invokeAsync(self, ((childName, ), context))

        def begin_createChild(self, childName, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_createChild.begin(self, ((childName, ), _response, _ex, _sent, context))

        def end_createChild(self, _r):
            return _M_IceDrive.Directory._op_createChild.end(self, _r)

        def removeChild(self, childName, context=None):
            return _M_IceDrive.Directory._op_removeChild.invoke(self, ((childName, ), context))

        def removeChildAsync(self, childName, context=None):
            return _M_IceDrive.Directory._op_removeChild.invokeAsync(self, ((childName, ), context))

        def begin_removeChild(self, childName, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_removeChild.begin(self, ((childName, ), _response, _ex, _sent, context))

        def end_removeChild(self, _r):
            return _M_IceDrive.Directory._op_removeChild.end(self, _r)

        def getFiles(self, context=None):
            return _M_IceDrive.Directory._op_getFiles.invoke(self, ((), context))

        def getFilesAsync(self, context=None):
            return _M_IceDrive.Directory._op_getFiles.invokeAsync(self, ((), context))

        def begin_getFiles(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_getFiles.begin(self, ((), _response, _ex, _sent, context))

        def end_getFiles(self, _r):
            return _M_IceDrive.Directory._op_getFiles.end(self, _r)

        def getBlobId(self, filename, context=None):
            return _M_IceDrive.Directory._op_getBlobId.invoke(self, ((filename, ), context))

        def getBlobIdAsync(self, filename, context=None):
            return _M_IceDrive.Directory._op_getBlobId.invokeAsync(self, ((filename, ), context))

        def begin_getBlobId(self, filename, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_getBlobId.begin(self, ((filename, ), _response, _ex, _sent, context))

        def end_getBlobId(self, _r):
            return _M_IceDrive.Directory._op_getBlobId.end(self, _r)

        def linkFile(self, fileName, blobId, context=None):
            return _M_IceDrive.Directory._op_linkFile.invoke(self, ((fileName, blobId), context))

        def linkFileAsync(self, fileName, blobId, context=None):
            return _M_IceDrive.Directory._op_linkFile.invokeAsync(self, ((fileName, blobId), context))

        def begin_linkFile(self, fileName, blobId, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_linkFile.begin(self, ((fileName, blobId), _response, _ex, _sent, context))

        def end_linkFile(self, _r):
            return _M_IceDrive.Directory._op_linkFile.end(self, _r)

        def unlinkFile(self, fileName, context=None):
            return _M_IceDrive.Directory._op_unlinkFile.invoke(self, ((fileName, ), context))

        def unlinkFileAsync(self, fileName, context=None):
            return _M_IceDrive.Directory._op_unlinkFile.invokeAsync(self, ((fileName, ), context))

        def begin_unlinkFile(self, fileName, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.Directory._op_unlinkFile.begin(self, ((fileName, ), _response, _ex, _sent, context))

        def end_unlinkFile(self, _r):
            return _M_IceDrive.Directory._op_unlinkFile.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDrive.DirectoryPrx.ice_checkedCast(proxy, '::IceDrive::Directory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDrive.DirectoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDrive::Directory'
    _M_IceDrive._t_DirectoryPrx = IcePy.defineProxy('::IceDrive::Directory', DirectoryPrx)

    _M_IceDrive.DirectoryPrx = DirectoryPrx
    del DirectoryPrx

    _M_IceDrive.Directory = Ice.createTempClass()
    class Directory(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDrive::Directory')

        def ice_id(self, current=None):
            return '::IceDrive::Directory'

        @staticmethod
        def ice_staticId():
            return '::IceDrive::Directory'

        def getParent(self, current=None):
            raise NotImplementedError("servant method 'getParent' not implemented")

        def getChilds(self, current=None):
            raise NotImplementedError("servant method 'getChilds' not implemented")

        def getChild(self, childName, current=None):
            raise NotImplementedError("servant method 'getChild' not implemented")

        def createChild(self, childName, current=None):
            raise NotImplementedError("servant method 'createChild' not implemented")

        def removeChild(self, childName, current=None):
            raise NotImplementedError("servant method 'removeChild' not implemented")

        def getFiles(self, current=None):
            raise NotImplementedError("servant method 'getFiles' not implemented")

        def getBlobId(self, filename, current=None):
            raise NotImplementedError("servant method 'getBlobId' not implemented")

        def linkFile(self, fileName, blobId, current=None):
            raise NotImplementedError("servant method 'linkFile' not implemented")

        def unlinkFile(self, fileName, current=None):
            raise NotImplementedError("servant method 'unlinkFile' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDrive._t_DirectoryDisp)

        __repr__ = __str__

    _M_IceDrive._t_DirectoryDisp = IcePy.defineClass('::IceDrive::Directory', Directory, (), None, ())
    Directory._ice_type = _M_IceDrive._t_DirectoryDisp

    Directory._op_getParent = IcePy.Operation('getParent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IceDrive._t_DirectoryPrx, False, 0), (_M_IceDrive._t_RootHasNoParent,))
    Directory._op_getChilds = IcePy.Operation('getChilds', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IceDrive._t_Strings, False, 0), ())
    Directory._op_getChild = IcePy.Operation('getChild', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceDrive._t_DirectoryPrx, False, 0), (_M_IceDrive._t_ChildNotExists,))
    Directory._op_createChild = IcePy.Operation('createChild', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceDrive._t_DirectoryPrx, False, 0), (_M_IceDrive._t_ChildAlreadyExists,))
    Directory._op_removeChild = IcePy.Operation('removeChild', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceDrive._t_ChildNotExists,))
    Directory._op_getFiles = IcePy.Operation('getFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_IceDrive._t_Strings, False, 0), ())
    Directory._op_getBlobId = IcePy.Operation('getBlobId', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_IceDrive._t_FileNotFound,))
    Directory._op_linkFile = IcePy.Operation('linkFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, (_M_IceDrive._t_FileAlreadyExists,))
    Directory._op_unlinkFile = IcePy.Operation('unlinkFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, (_M_IceDrive._t_FileNotFound,))

    _M_IceDrive.Directory = Directory
    del Directory

_M_IceDrive._t_DirectoryService = IcePy.defineValue('::IceDrive::DirectoryService', Ice.Value, -1, (), False, True, None, ())

if 'DirectoryServicePrx' not in _M_IceDrive.__dict__:
    _M_IceDrive.DirectoryServicePrx = Ice.createTempClass()
    class DirectoryServicePrx(Ice.ObjectPrx):

        def getRoot(self, user, context=None):
            return _M_IceDrive.DirectoryService._op_getRoot.invoke(self, ((user, ), context))

        def getRootAsync(self, user, context=None):
            return _M_IceDrive.DirectoryService._op_getRoot.invokeAsync(self, ((user, ), context))

        def begin_getRoot(self, user, _response=None, _ex=None, _sent=None, context=None):
            return _M_IceDrive.DirectoryService._op_getRoot.begin(self, ((user, ), _response, _ex, _sent, context))

        def end_getRoot(self, _r):
            return _M_IceDrive.DirectoryService._op_getRoot.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IceDrive.DirectoryServicePrx.ice_checkedCast(proxy, '::IceDrive::DirectoryService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IceDrive.DirectoryServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IceDrive::DirectoryService'
    _M_IceDrive._t_DirectoryServicePrx = IcePy.defineProxy('::IceDrive::DirectoryService', DirectoryServicePrx)

    _M_IceDrive.DirectoryServicePrx = DirectoryServicePrx
    del DirectoryServicePrx

    _M_IceDrive.DirectoryService = Ice.createTempClass()
    class DirectoryService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IceDrive::DirectoryService')

        def ice_id(self, current=None):
            return '::IceDrive::DirectoryService'

        @staticmethod
        def ice_staticId():
            return '::IceDrive::DirectoryService'

        def getRoot(self, user, current=None):
            raise NotImplementedError("servant method 'getRoot' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IceDrive._t_DirectoryServiceDisp)

        __repr__ = __str__

    _M_IceDrive._t_DirectoryServiceDisp = IcePy.defineClass('::IceDrive::DirectoryService', DirectoryService, (), None, ())
    DirectoryService._ice_type = _M_IceDrive._t_DirectoryServiceDisp

    DirectoryService._op_getRoot = IcePy.Operation('getRoot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_IceDrive._t_DirectoryPrx, False, 0), ())

    _M_IceDrive.DirectoryService = DirectoryService
    del DirectoryService

# End of module IceDrive
